#ТЕОРИЯ!!!

# - нечитаемый объект

#Все программы ЗДЕСЬ я буду проверять в отдельном файле ТЕСТ
#Стандартано, первая программа
print('Hello, World!')
# print - выводит результат
# 'Hello, World!' - тип данных СТРОКА
print(5)
# print - выводит результат 5
print(10)
print(15)
# print - выводит 2 результата 10 и 15
print('Hello, World!')
print("Hello, World!")
# Кавычки значения не имеют!

#ПЕРЕМЕННЫЕ
a = 5 # Целые числа
b = 8
c = 'Privet' # Строки
print(a,b,c)
# 5 8 Privet
a = 17
print(a,b,c)
# 17 8 Privet
#ПЕРЕМЕННУЮ МОЖНО МЕНЯТЬ! Выводится последняя переменная!
c = a
print(a,b,c)
#17 8 17

a = 1
b = 2
a, b = b, a #Меняем значения переменных местами
print(a,b) # 2 1

#Меняем значения переменных местами вводя 3ю переменную
a = 1
b = 2
c = a
a = b
b = c

# ТИПЫ ДАННЫХ В PYTHON
int #ЦЕЛЫЕ числа 1 2 3
float #ЧИСЛА с плав. точкой 5.5 ,6.75
str #СТРОКА текст 'Hello World!', '100'

list #СПИСОК / МАССИВ - МЕНЯТЬ МОЖНО, ПОРЯДОК СОХРАНЯЕТСЯ!
# упорядоченная последовательность объектов
# пример -> [5,'Hey!!!', 10,5]

dict #СЛОВАРЬ отображения Набор неупорядоченных пар(ключ:значение)
# пример -> {'ключ1(РУС)':'значение1(ENG)', 'ключ2':'значение2'}

tuple #КОРТЕЖ - МЕНЯТЬ НЕЛЬЗЯ, ПОРЯДОК СОХРАНЯЕТСЯ!
# Неизменяемая упорядоченная последовательность
# пример -> (5, 'asdasdsa', 10.5)

set  #НЕ МОЖЕТ БЫТЬ ОДИНАКОВЫХ ОБЪЕКТОВ, фильтрует дубликаты, ПОРЯДОК НЕ СОХРАНЯЕТСЯ!
#МНОЖЕСТВО Неупорядоченный набор уникальных объектов
# пример -> {'a','b'}

bool #ЛОГИЧЕСКИЙ тип
# пример -> True, Falce

#ОПЕРАТРО IF ELIF ELSE
a = 2
b = 5
if a<b: # Условие!
    print('a меньше чем b') # Если условие TRUE
print('Вне блока if') # К условию не относится

c = 5
d = 8
if d<c: # Условие!
    print('d меньше чем c') # Если условие TRUE
else: #ИНАЧЕ если не выполняются предыдущие условия!
    print('d больше чем c, или d равняется c')
    print('Строк может быть сколько угодно')

#Условия прверяются сверху вниз!
e = 30
f = 15
if e<f: #Условие 1
    print('e меньше f')
elif e == f: #Условие 2 (может быть несколько условий (elif)
    print('e равно f')
elif e>f+10:
    print('разница между e и f больше 10')
else:  #Условие 3 (если предыдущие условия не выполнились)
    print('e больше f')

k=5
l=8
if k>l:
    print('k больше l')
else: #В этом блоке тоже может быть вложена отдельная логическая схема!
    if k==l:
        print('k равно l')
    else:
        print('k меньше l')

#ИНДЕКС МАССЫ ТЕЛА (применение на практике)
#Калькулятор индекса массы тела
#Вес в КГ / рост (в квадрате)

weight = int(input()) # int(input()) ввести число самостоятельно!
height = int(input())

name = 'Kot'
weight = 72 #вес
height = 1.7  #рост
bmi = weight/(height**2) #**2 - возведедние в степень
print('Индекс массы тела:' + str(bmi))
#bmi не выведется потому что значение его float
#str переводит число в строку!
# print('Индекс массы тела:', bmi) КАК вариант.
if bmi <25:
    print('У',name,'нет лишнего веса')
else:
    print('У',name,'нет лишнего веса')

print (weight <72) #Булевые значения True/Falce
#Falce
nepravda = weight <72
print(nepravda)
#Falce

#ФУНКЦИИ - Блок кода (создаём, потом можно выполнять его многократно!)
#ФУНКЦИИ - def и имя функции
def sayHello(): #def - назначить функцию sayHello - название функции () - аргумента НЕТ
    print('Hello') #список действий, которые выполняет функция
    print('World')
    print('EveryBody')
sayHello() #вызываем функцию получаем все действия, которые она выполняет!

sayHello()
print('pause')
sayHello() #К одной и той же функции можно обращаться много раз!

#Создадим ещё одну функцию С АРГУМЕНТОМ
def square(x):
    print('Квадрат числа', x,'=',x**2)
square(5)
square(10)
#Квадрат числа 5 = 25
#Квадрат числа 10 = 100

#С Циклом FOR
for i in range(1,11): #Все значения i c 1-11 не вкл.
    square(i)

#Создадим ещё одну функцию С 2мя АРГУМЕНТАМИ

def multiplay(a, b): #Функция вкл 2 аргумента
    print(a*b)  #Выводит произведение a*b
multiplay(2, 3)
multiplay(70, 100)
#6
#7000

#Проверка на четность
#Программа ФУНКЦИИ
def even(a):
    if a%2==0:
        print(a,'Четное')
    else:
        print(a,'Не четное')
#ГЛАВНАЯ программа
for i in range(20, 30): #Числа от 20-30
    even(i)
#Выводит все числа от 20-30 определяя четность!

# ФАКТОРИАЛ
#Программа ФУНКЦИИ
def factorial(n):
    pr=1
    for i in range(1,n+1):
        pr=pr*i
    print(pr)
#ГЛАВНАЯ программа
factorial(3)

#Ещё один пример применения функции:

if 5>3:
    def primer():
        print('ВСЁ ВЕРНО!')
else:
    def primer():
        print('ТАКОГО НЕ БЫВАЕТ!')
primer() #В зависимости от логики будет выводиться функция!

#СПИСКИ / МАССИВЫ (тип данных, который в себе хранит другие типы данных)
#Ящик с объектами МЕНЯТЬ МОЖНО, ПОРЯДОК СОХРАНЯЕТСЯ!
# упорядоченная последовательность объектов

a = [3, 5, 20]
print(a)
#[3, 5, 20]
a.append(15) #функция добавляет в переменной а - 15 в конец списка!
print(a)
#[3, 5, 20, 15]
a.append('Hi!!!')
print(a)
#[3, 5, 20, 15, 'Hi!!!']
a.append([5, 6])
print(a)
#[3, 5, 20, 15, 'Hi!!!', [5, 6]]
a.pop() #Удаляет последний добавленный элемент в списке
print(a)
#[3, 5, 20, 15, 'Hi!!!']
#При повторном применении удаляет ещё один элемент из списка

#Каждый элемент списка имеет индекс, который начинается с 0
a = [3, 5, 20, 15, 'Hi!!!']
print(a[0])
#3
